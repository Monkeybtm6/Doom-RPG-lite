#library "MRPGMain"
#include "zcommon.acs"
#define PLAYER_TID_START 1000

#define atkbase 0.05
#define Defbase 0.005

str StatArray[4] =
{
	"StatVIT",
	"StatATK",
	"StatINT",
	"StatDEF"
};

Function int ThisLevel (void)
{
	int SkillMult = 2 * GameSkill(),
	leveladd = playercount() * 1,
	levelSet,
	i = 0,
	levelav = 1;
	
	for (i = 0; i < playercount(); i++) 
	{
		levelav +=  CheckActorInventory(PLAYER_TID_START + i,"Playerlevel");
	}
	LevelSet = (levelav / playercount());
 
	Return (Leveladd + LevelSet) + Random(-2 -(Levelset/5), 2 +(Levelset/5));
}

Script "UpdateStats" (void)
{
	if(!(ClassifyActor(0) & ACTOR_PLAYER))
	{ 
		Terminate; 
	}
  
	int StartHealth = 100,
	Player_Max_Health_in = CheckInventory("StatVIT") * 5,
	Player_Max_Health_Out = (PLAYER_MAX_HEALTH_in + StartHealth),
	MyInt = 2 * CheckInventory("StatINT"),
	MyMass = CheckInventory("StatDEF") / 2,
	Damagereduction = defbase * CheckInventory("StatDEF"),
	DamageBoost = atkbase * CheckInventory("StatATK");
  
	SetActorProperty(PLAYER_TID_START+PlayerNumber(), APROP_SPAWNHEALTH, Player_Max_Health_Out);
	SetActorProperty(PLAYER_TID_START+PlayerNumber(), APROP_DamageMultiplier, 1.0 + DamageBoost);
	SetActorProperty(PLAYER_TID_START+PlayerNumber(), APROP_Mass, 100 + (MyMass >> 16));
	SetActorProperty(PLAYER_TID_START+PlayerNumber(), APROP_DamageFactor, 1.0 - Damagereduction);
	
	if(getactorproperty(0,APROP_DamageFactor)<0.5)
	{
		SetActorProperty(PLAYER_TID_START+PlayerNumber(), APROP_DamageFactor, 0.5);
	}
	SetAmmoCapacity("Mana", 75 + MyInt); 
}


script "MRPGEnter" ENTER
{
	Thing_ChangeTID(0,PLAYER_TID_START+PlayerNumber());
	delay(2);
	if(CheckInventory("Playerlevel") <= 0)
	{
		GiveInventory("Playerlevel",1);
	}
	ACS_NamedExecuteAlways("UpdateStats",0);
	ACS_NamedExecuteAlways("ConstSkillActivator",0);
	ACS_NamedExecuteAlways("SkillActivator",0);
	ACS_NamedExecuteAlways("SpellSelectDisplay",0);
	Giveinventory("Nullspell",1);
	delay(1);
	
	if(CheckInventory("Playerintdone") == 0)
	{
		SetActorProperty(0, APROP_HEALTH,GetActorProperty(0,APROP_SPAWNHEALTH));
	}
	Giveinventory("Mana",GetAmmoCapacity("mana"));
}

script "MRPGRespawn" RESPAWN
{
	Thing_ChangeTID(PLAYER_TID_START+PlayerNumber(),0);
	Thing_ChangeTID(0,PLAYER_TID_START+PlayerNumber());
	delay(1);
	ACS_NamedExecuteAlways("UpdateStats",0);
	SetActorProperty(0, APROP_HEALTH,GetActorProperty(0,APROP_SPAWNHEALTH));
}


Script "Levelupcheck" (int EXPA)
{
	if(ClassifyActor(0) & ACTOR_MONSTER)
	{ 
		Terminate; 
	}
	
	int Lvl = CheckInventory("Playerlevel"),
	EXPBase = GetCvar("MRPG_EXPBase"),
	EXPMULT = GetCvar("MRPG_EXPMULT"),
	Statincrease = GetCvar("MRPG_statsperlevel"),
	RandStat,
	Skillincrease = GetCvar("MRPG_skillsperlevel"),
	Nextlevel = EXPBASE * ((Lvl * EXPMULT) >> 16),
	MaxLevel = GetCvar("MRPG_LevelCap");

	GiveInventory("Experience", EXPA);
 
	While(CheckInventory("Experience") >= Nextlevel && LVL <= Maxlevel)
	{
		GiveInventory("Playerlevel", 1);
		TakeInventory("Experience",Nextlevel);
		ACS_NamedExecuteAlways("UpdateStats",0);
		
		setfont("SMALLFONT");
		sethudsize (640,400, 1);
		Hudmessage(s:"You have gained a level!";HUDMSG_PLAIN,10,CR_UNTRANSLATED, 340.0, 150.0,5.0,1.0);
		Playsound(0,"misc/p_pkup");
		GiveInventory("SkillPoints",Skillincrease);
		
		Lvl = CheckInventory("Playerlevel");
		Nextlevel = EXPBASE * ((Lvl * EXPMULT) >> 16);
		
		if(GetUserCVar(PlayerNumber(),"MRPG_RandomStats")==false)
		{	
			GiveInventory("StatPoints",Statincrease);
		}
		Else
		{
			for(int sid = 0; sid < Statincrease; sid++)
			{
				int StatCounter;
				Randstat = random(0,3);
				while(CheckInventory(StatArray[Randstat])==500 || StatCounter < 3)
					{
						randstat ++; 
						StatCounter ++;
						if(randstat > 3)
						{
							Randstat = 1;
						}
					}
				
				GiveInventory(StatArray[Randstat], 1);
			}
		}
	}
}


/*script "LevelendGrowth" UNLOADING
{
	int ExpKillbonus = getlevelinfo(LEVELINFO_KILLED_MONSTERS),
	ExpSecretBonus = getlevelinfo(LEVELINFO_FOUND_SECRETS);

	for (int i = 0; i < playercount(); i++) 
	{
		GiveActorInventory(PLAYER_TID_START + i,"Experience",EXPKillBonus);
		GiveActorInventory(PLAYER_TID_START + i,"Experience",EXPSecretBonus * 10);
	}
}*/

//Leftover Zandronum code
/*script "DAMAGESCR" (int indamage, int Isproj)
{
	if(Isproj == 1)
	{ SetActivatorToTarget(0); }
	int counter = ATKBase * CheckInventory("StatATK");
    int outdamage = indamage * (1.0 + counter);
	setresultvalue(outdamage >> 16);
	//print(f: outdamage);
	
}*/

script "MonsterInitializer" Open
{
	SpawnForced("Monsterinitgiver",0,0,0);
	Log(s:"MonsterInitializer ran");
}

script "MonsterLoop" (Void)
{
	//Monster initialization
	Delay(5);
	int MonLevel = ThisLevel();
	int MonStats = ((GetCvar("MRPG_statsperlevel") * MonLevel) / 4);
	
	GiveInventory("StatVIT", MonStats);
	GiveInventory("StatATK", MonStats);
	GiveInventory("StatDEF", MonStats);
	
	GiveInventory("PlayerLevel", MonLevel);
	
	int MonHealth = getactorproperty(0, APROP_Health),
	MonHealthmult = 0.05 * CheckInventory("StatVIT"),
	DamageBoost = atkbase * CheckInventory("StatATK"),
	MonMass = getactorproperty(0,APROP_MASS),
	MonMassMult = 0.005 * CheckInventory("StatDEF"),
	MonEXP = getactorproperty(0, APROP_SpawnHealth) / 20;
	if(getcvar("MRPG_Monsterscaling") == true)
	{
		GiveInventory("MyMaxHealth", (MonHealth * (1.0 + MonHealthmult))>> 16 );
		SetActorProperty(0, APROP_Health, (MonHealth * (1.0 + MonHealthmult))>> 16 );
		SetActorProperty(0, APROP_DamageMultiplier, 1.0 + DamageBoost);
		SetActorProperty(0, APROP_Mass, MonMass * (1.0 + MonMassMult) >> 16);
	}
	//Living loop
	While (getactorproperty(0, APROP_Health) > 0)
	{
		Delay(10);
	}
	//Death
	DropItem(0,"SpellSpawner",1,25);
	
	for (int i = 0; i < playercount(); i++) 
	{
		GiveActorInventory(PLAYER_TID_START + i,"Experience",MonEXP);
	}
	
	SetActivatorToTarget(0);
		ACS_NamedExecuteAlways("Levelupcheck",0,0);
	GiveActorinventory(0,"Mana",random(1,10));
	
	if(CheckInventory("SKRefuel") >= 1)
	{
		DropItem(0,"AmmoSynthEffect",1,(32 * CheckInventory("SKRefuel")));
	}
	if(CheckInventory("SKVampirisim") >= 1)
	{
		GiveInventory("Health",(Random(1,CheckInventory("SKVampirisim"))));
	}
}

script "FriendlySummon" (int Duration)
{
	Delay(35*Duration);
	
	DamageThing(0);
}

script "Healthbonuseffect" (int amount)
{
	int setMaxhealth = GetActorProperty(0,APROP_SPAWNHEALTH);
	
	GiveInventory("HealthBonEffect",amount);
	
	If(GetActorProperty(0,APROP_HEALTH) > (setMaxhealth + 100))
	{
		SetActorProperty(0, APROP_Health, (setMaxhealth + 100));
	}
}