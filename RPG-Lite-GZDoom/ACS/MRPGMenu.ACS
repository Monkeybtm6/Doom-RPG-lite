#library "MRPGMenu"
#include "zcommon.acs"
#import "MRPGMdat.acs"

#define PLAYER_TID_START 1000

#Define TotalSubMenus 2

str submenus[TotalSubMenus] =
{
	"SubMenu1",
	"SubMenu2"
};

Function Bool DrawSprite (Str Sprite, Int ID, Int X, Int Y, Int Alpha)
{
	SetFont(Sprite);
	HUDMessage(s:"A"; HUDMSG_FADEINOUT|HUDMSG_NOTWITHFULLMAP|HUDMSG_ALPHA, ID, CR_UNTRANSLATED, X, Y, 0.2, 0.025, Alpha);
	Return True;
}

Function Bool DrawEnemyHealthBar (Int CurrentHealth, Int MaxHealth,int RPGlevel , Str Name)
{
	Int a = CurrentHealth << 16;
	Int b = Maxhealth << 16;
	Int c = FixedDiv(a, b); // This should give us a percentage of remaining health as a fixed point number between 0 and 1.0
	Int f_xresolution = 640 << 16;
	
	Int centerbarx = ((FixedDiv (f_xresolution, 2.0)) - (FixedDiv(120.0, 2.0)));
	
	Int barwidth = (FixedMul(c, 120.0) + 0.5) >> 16;
	
	SetHudSize(640,480,1);
	SetHUDClipRect((centerbarx >> 16),0,barwidth,400, 0);
	DrawSprite("HudBHPSM", 101, 0.1+centerbarx, 90.1, 1.0);
	
	SetHUDClipRect(0, 0, 0, 0);
	DrawSprite("HudBSM", 102, 0.1+centerbarx, 90.1, 1.0);
	
	SetFont("SmallFONT");
	hudmessage(d:CurrentHealth,s: "/",d:MaxHealth;HUDMSG_FADEINOUT|HUDMSG_NOTWITHFULLMAP|HUDMSG_ALPHA,90,CR_White, 262.1, 95.1,0.2,0.025,1.0);
	hudmessage(s:Name,s:" ",d:RPGlevel;HUDMSG_FADEINOUT|HUDMSG_NOTWITHFULLMAP|HUDMSG_ALPHA,91,CR_White, 262.1, 81.1,0.2,0.025,1.0);
	
	Return True;
}

Function Void MRPGinmenuTEXT (Int selected, Int Selections, Int Submenu)
{
	int Lvl = CheckInventory("Playerlevel"),
	EXPBase = GetCvar("MRPG_EXPBase"),
	EXPMULT = GetCvar("MRPG_EXPMULT"),
	Nextlevel = EXPBASE * ((Lvl * EXPMULT) >> 16);
	SetHudSize(640,400, 1);
	setfont("MenuBG");
	Hudmessage(s:"A";HUDMSG_PLAIN,500,CR_UNTRANSLATED, 320.0, 200.0,0.2,10);	
	setfont("BIGFONT");
	Hudmessage(l:submenus[Submenu];HUDMSG_PLAIN,51,CR_UNTRANSLATED, 320.0, 50.0,0.2,10);	
	setfont("SmallFONT");	
	Hudmessage(s:"Level: ",d:CheckInventory("PlayerLevel"),
	s:"\nExperience: ",d:CheckInventory("Experience"),s:" / ",d:Nextlevel,
	s:"\nHealth: ",d:getActorProperty(0,APROP_HEALTH),s:" / ",d:getActorProperty(0,APROP_SPAWNHEALTH),
	s:"\nEnergy: ",d:CheckInventory("Mana"),s:" / ",d:Getammocapacity("mana")
	;HUDMSG_PLAIN,52,CR_UNTRANSLATED, 100.0, 60.1,0.2,10);
	Hudmessage(s:"Stat Points: ",d:CheckInventory("StatPoints");HUDMSG_PLAIN,55,CR_UNTRANSLATED, 520.0, 60.0,0.2,10);
	Hudmessage(s:"Skill Points: ",d:CheckInventory("SkillPoints");HUDMSG_PLAIN,56,CR_UNTRANSLATED, 520.0, 70.0,0.2,10);
	Hudmessage(s:"Damage Reduction: ",f:getactorproperty(0,APROP_DamageFactor),
	s:"\nDamage Multiplier: ",f:getactorproperty(0,APROP_DamageMultiplier);
	HUDMSG_PLAIN,57,CR_UNTRANSLATED, 120.0, 110.0,0.2,10);
	Hudmessage(s:" Move up: ",k: "+forward" ,s:"\nMove Down: ",k: "+back" ,s:"\nSelect: ",k: "+use";
		HUDMSG_PLAIN,60,CR_White, 250.0, 380.0,0.2,10);
	
	str Selectedstring;
	for(int i = 0; i < Selections; i++)
	{
		Selectedstring = (i == Selected) ? "\cf" : "\c-";
		
		If(CheckInventory(menuoptions[Submenu][i].item) > 0)
		{	
			HudMessage (s:Selectedstring,l:menuoptions[Submenu][i].name,d:CheckInventory(menuoptions[Submenu][i].item);
				HUDMSG_PLAIN,10+i,CR_Grey, 320.0, 80.0 + (10.0 * i),0.2,10);
		}
		else if(i >= (Selections -2))
		{		
			HudMessage (s:Selectedstring,l:menuoptions[Submenu][i].name;
				HUDMSG_PLAIN,10+i,CR_Grey, 320.0, 90.0 + (10.0 * i),0.2,10);
		}
		else
		{		
			HudMessage (s:Selectedstring,l:menuoptions[Submenu][i].name;
				HUDMSG_PLAIN,10+i,CR_Grey, 320.0, 80.0 + (10.0 * i),0.2,10);
		}
				
		Hudmessage(l:Menuoptions[SubMenu][selected].desc;
				HUDMSG_PLAIN,40,CR_UNTRANSLATED, 320.0, 310.1,0.2,10);
		
		if(submenu >= 1)
		{
			Hudmessage(s:"Cost: ",
			d:Menuoptions[SubMenu][selected].Cost * (CheckInventory(menuoptions[Submenu][Selected].item) + 1),
			s:"\nLevel Required: ",
			d:Menuoptions[SubMenu][selected].Levelreq;
					HUDMSG_PLAIN,41,CR_UNTRANSLATED, 320.0, 290.1,0.2,10);
		}
	}

}

script "MRPGOpenMenu" (void)
{
	if(CheckInventory("MenuOpen")>=1)
	{
		TakeInventory("MenuOpen",99);
		SetPlayerProperty(0, False, PROP_TOTALLYFROZEN);
	}
	else
	{
		GiveInventory("MenuOpen",1);
		ACS_NamedExecuteAlways("MRPGinmenu",0);
	}
	Delay(10);
}

script "MRPGinmenu" (void)
{
	SetPlayerProperty(0, true, PROP_TOTALLYFROZEN);
	int button,
	Selection;
	while(CheckInventory("MenuOpen")==1)
	{
		button = GetPlayerInput(-1, INPUT_BUTTONS);
		if (button & BT_FORWARD)
		{
			if(Selection>0)
			{
				Selection--;
				Delay(5);
			}
		}
	
		else if (button & BT_back)
		{
			if(Selection<5)
			{
				Selection++;
				Delay(5);
			}
		}

		else if (button & BT_USE)
		{
			Switch(Selection)
			{
				case 0:
				case 1:
				case 2:
				case 3:
				if (CheckInventory("statPoints") >= 1 && CheckInventory(Menuoptions[0][Selection].item) < 1000)
					{
						TakeInventory("statPoints",1);
						GiveInventory(Menuoptions[0][Selection].item,1);
						Delay(5);
					}
				Break;
				
				//always last
				case 4:
				GiveInventory("MenuOpen",1);
				Selection=0;
				Delay(5);
				Break;
				
				case 5:
				TakeInventory("MenuOpen",1);
				SetPlayerProperty(0, False, PROP_TOTALLYFROZEN);
				Delay(5);
				Break;
				
			}
			ACS_NamedExecuteAlways("UpdateStats",0);
		}
		MRPGinmenuTEXT(Selection,6,0);
		Delay(1);
	}
	while(CheckInventory("MenuOpen")==2)
	{
		button = GetPlayerInput(-1, INPUT_BUTTONS);
		if (button & BT_FORWARD)
		{
			if(Selection>0)
			{
				Selection--;
				Delay(5);
			}
		}
	
		else if (button & BT_back)
		{
			if(Selection<(TotalSkills -1))
			{
				Selection++;
				Delay(5);
			}
		}
		
		else if (button & BT_USE)
		{
			Switch(Selection)
			{	
				Case 0:
				Case 1:
				Case 2:
				Case 3:
				Case 4:
				Case 5:
				Case 6:
				if (CheckInventory("SkillPoints") >= (Menuoptions[1][Selection].Cost * (CheckInventory(Menuoptions[1][Selection].item) + 1)) 
				&& CheckInventory(Menuoptions[1][Selection].item) < Menuoptions[1][Selection].maxrank 
				&& CheckInventory("Playerlevel") >= Menuoptions[1][Selection].levelreq)
				{
					TakeInventory("SkillPoints",Menuoptions[1][Selection].Cost * (CheckInventory(Menuoptions[1][Selection].item)+1));
					GiveInventory("SpentSkillPoints",Menuoptions[1][Selection].Cost * (CheckInventory(Menuoptions[1][Selection].item)+1));
					GiveInventory(Menuoptions[1][Selection].item,1);
					Delay(5);
				}
				Break;

				//always last
				case 7:
				TakeInventory("MenuOpen",1);
				Selection=0;
				Delay(5);
				Restart;
				Break;
				
				case 8:
				TakeInventory("MenuOpen",99);
				Selection=0;
				SetPlayerProperty(0, False, PROP_TOTALLYFROZEN);
				Delay(5);
				Break;
			}
		}
		MRPGinmenuTEXT(Selection,TotalSkills,1);
		Delay(1);
	}
}

script "SpellSelectDisplay" (void)
{
	int SelectedSpell = Checkinventory("PlayerSpellSelector");
	int Savemytid = ActivatorTID();
	int thisThingMaxHealth;
	int thisThingHealth;
	int thisThingLevel;
	SetHudSize(640,480, 1);
	DrawSprite(SpellsList[SelectedSpell].Icon, 100, GetUserCvar(PlayerNumber(),"MRPG_scrhudSIx") +.1, GetUserCvar(PlayerNumber(),"MRPG_scrhudSIy") +.1, 1.0);
	if(CheckInventory("SKscan") > 0)
	{
		if(SetActivator(0,AAPTR_PLAYER_GETTARGET))
		{
			SetActivator(0,AAPTR_PLAYER_GETTARGET);
			int thisthingtid = ActivatorTID();
			if( (ClassifyActor(0) & ACTOR_MONSTER) && (ClassifyActor(0) & ACTOR_ALIVE) && (CheckFlag(0, "Shootable")))
			{
				
				Str Monstername = GetActorProperty(thisthingtid, APROP_NameTag);
				thisThingMaxHealth = CheckActorInventory(thisthingtid,"MyMaxHealth");
				thisThingHealth = GetActorProperty(thisthingtid,APROP_Health);
				thisThingLevel = CheckActorInventory(thisthingtid,"Playerlevel");
						
				if (Savemytid != ActivatorTID())
				{
					SetActivator(Savemytid);
					If (CheckSight (thisthingtid, Savemytid,0))
					{
						DrawEnemyHealthBar(thisThingHealth, thisThingMaxHealth, thisThingLevel, Monstername);
					}
				}
			}
		}
		SetActivator(Savemytid);
	}
	Delay(5);
	Restart;
}

script "SpellSelectUp" (void)
{
	int SelectedSpell = Checkinventory("PlayerSpellSelector");
	SelectedSpell++;
	while(Checkinventory(SpellsList[SelectedSpell].item) == 0)
	{
		SelectedSpell++;
		if(SelectedSpell > Totalspells)
		{
			SelectedSpell = 0;
		}
	}
	takeinventory("PlayerSpellSelector",99);
	giveinventory("PlayerSpellSelector",SelectedSpell);
}

script "SpellSelectDown" (void)
{
	int SelectedSpell = Checkinventory("PlayerSpellSelector");
	SelectedSpell--;
	while(Checkinventory(SpellsList[SelectedSpell].item) == 0)
	{
		SelectedSpell--;
		if(SelectedSpell < 0)
		{
			SelectedSpell = Totalspells;
		}
	}
	takeinventory("PlayerSpellSelector",99);
	giveinventory("PlayerSpellSelector",SelectedSpell);
}

script "SpellUse" (void)
{
	int SelectedSpell = Checkinventory("PlayerSpellSelector");
	
	if(Checkinventory("Mana") >= SpellsList[SelectedSpell].Cost)
	{
		Takeinventory("Mana",SpellsList[SelectedSpell].Cost);
		giveinventory(SpellsList[SelectedSpell].Effect,1);
	}
	Else
	{
		SetHudSize(640,480, 1);
		setfont("SmallFONT");
		hudmessage(s:"Needs ",d:SpellsList[SelectedSpell].Cost,s:" Energy";HUDMSG_PLAIN,92,CR_White, 320.0, 200.0,1.0,1.0);
	}
}