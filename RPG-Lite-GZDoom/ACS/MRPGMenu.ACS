#library "MRPGMenu"
#include "zcommon.acs"
#import "MRPGMdat.acs"

#define PLAYER_TID_START 1000

#Define TotalSubMenus 2

str submenus[TotalSubMenus] =
{
	"SubMenu1",
	"SubMenu2"
};

Function Void MRPGinmenuTEXT (Int selected, Int Selections, Int Submenu)
{
	int Lvl = CheckInventory("Playerlevel"),
	EXPBase = GetCvar("MRPG_EXPBase"),
	EXPMULT = GetCvar("MRPG_EXPMULT"),
	Nextlevel = EXPBASE * ((Lvl * EXPMULT) >> 16);
	setfont("BIGFONT");
	sethudsize (640,400, 1);
	Hudmessage(l:submenus[Submenu];HUDMSG_PLAIN,50,CR_UNTRANSLATED, 320.0, 50.0,0.2,10);	
	setfont("SmallFONT");	
	Hudmessage(s:"Level: ",d:CheckInventory("PlayerLevel");HUDMSG_PLAIN,51,CR_UNTRANSLATED, 120.0, 60.0,0.2,10);
	Hudmessage(s:"Experience: ",d:CheckInventory("Experience"),s:" / ",d:Nextlevel;HUDMSG_PLAIN,52,CR_UNTRANSLATED, 120.0, 70.0,0.2,10);
	Hudmessage(s:"Health: ",d:getActorProperty(0,APROP_HEALTH),s:" / ",d:getActorProperty(0,APROP_SPAWNHEALTH);HUDMSG_PLAIN,53,CR_UNTRANSLATED, 120.0, 80.0,0.2,10);
	Hudmessage(s:"Energy: ",d:CheckInventory("Mana"),s:" / ",d:Getammocapacity("mana");HUDMSG_PLAIN,54,CR_UNTRANSLATED, 120.0, 90.0,0.2,10);
	Hudmessage(s:"Stat Points: ",d:CheckInventory("StatPoints");HUDMSG_PLAIN,55,CR_UNTRANSLATED, 520.0, 60.0,0.2,10);
	Hudmessage(s:"Skill Points: ",d:CheckInventory("SkillPoints");HUDMSG_PLAIN,56,CR_UNTRANSLATED, 520.0, 70.0,0.2,10);
	Hudmessage(s:"Damage Reduction: ",f:getactorproperty(0,APROP_DamageFactor);HUDMSG_PLAIN,57,CR_UNTRANSLATED, 120.0, 110.0,0.2,10);
	Hudmessage(s:"Damage Multiplier: ",f:getactorproperty(0,APROP_DamageMultiplier);HUDMSG_PLAIN,58,CR_UNTRANSLATED, 120.0, 120.0,0.2,10);
	Hudmessage(s:" Move up: ",k: "+forward" ,s:"\n Move Down: ",k: "+back" ,s:"\n Select: ",k: "+use";
		HUDMSG_PLAIN,60,CR_White, 250.0, 380.0,0.2,10);
	
	str Selectedstring;
	for(int i = 0; i < Selections; i++)
	{
		Selectedstring = (i == Selected) ? "\cf" : "\c-";
		
		If(CheckInventory(menuoptions[Submenu][i].item) > 0)
		{	
			HudMessage (s:Selectedstring,l:menuoptions[Submenu][i].name,d:CheckInventory(menuoptions[Submenu][i].item);
				HUDMSG_PLAIN,10+i,CR_Grey, 320.0, 80.0 + (10.0 * i),0.2,10);
		}
		else if(i >= (Selections -2))
		{		
			HudMessage (s:Selectedstring,l:menuoptions[Submenu][i].name;
				HUDMSG_PLAIN,10+i,CR_Grey, 320.0, 90.0 + (10.0 * i),0.2,10);
		}
		else
		{		
			HudMessage (s:Selectedstring,l:menuoptions[Submenu][i].name;
				HUDMSG_PLAIN,10+i,CR_Grey, 320.0, 80.0 + (10.0 * i),0.2,10);
		}
				
		Hudmessage(l:Menuoptions[SubMenu][selected].desc;
				HUDMSG_PLAIN,40,CR_UNTRANSLATED, 320.0, 310.0,0.2,10);
		
		if(submenu >= 1)
		{
			Hudmessage(s:"Cost: ",
			d:Menuoptions[SubMenu][selected].Cost * (CheckInventory(menuoptions[Submenu][Selected].item) + 1),
			s:"\nLevel Required: ",
			d:Menuoptions[SubMenu][selected].Levelreq;
					HUDMSG_PLAIN,41,CR_UNTRANSLATED, 320.0, 290.0,0.2,10);
		}
	}

}

script "MRPGOpenMenu" (void)
{
	if(CheckInventory("MenuOpen")>=1)
	{
		TakeInventory("MenuOpen",99);
		SetPlayerProperty(0, False, PROP_TOTALLYFROZEN);
	}
	else
	{
		GiveInventory("MenuOpen",1);
		ACS_NamedExecuteAlways("MRPGinmenu",0);
	}
	Delay(10);
}

script "MRPGinmenu" (void)
{
	SetPlayerProperty(0, true, PROP_TOTALLYFROZEN);
	int button,
	Selection;
	while(CheckInventory("MenuOpen")==1)
	{
		button = GetPlayerInput(-1, INPUT_BUTTONS);
		if (button & BT_FORWARD)
		{
			if(Selection>0)
			{
				Selection--;
				Delay(5);
			}
		}
	
		else if (button & BT_back)
		{
			if(Selection<5)
			{
				Selection++;
				Delay(5);
			}
		}

		else if (button & BT_USE)
		{
			Switch(Selection)
			{
				case 0:
				case 1:
				case 2:
				case 3:
				if (CheckInventory("statPoints") >= 1 && CheckInventory(Menuoptions[0][Selection].item) < 1000)
					{
						TakeInventory("statPoints",1);
						GiveInventory(Menuoptions[0][Selection].item,1);
						Delay(5);
					}
				Break;
				
				//always last
				case 4:
				GiveInventory("MenuOpen",1);
				Selection=0;
				Delay(5);
				Break;
				
				case 5:
				TakeInventory("MenuOpen",1);
				SetPlayerProperty(0, False, PROP_TOTALLYFROZEN);
				Delay(5);
				Break;
				
			}
			ACS_NamedExecuteAlways("UpdateStats",0);
		}
		MRPGinmenuTEXT(Selection,6,0);
		Delay(1);
	}
	while(CheckInventory("MenuOpen")==2)
	{
		button = GetPlayerInput(-1, INPUT_BUTTONS);
		if (button & BT_FORWARD)
		{
			if(Selection>0)
			{
				Selection--;
				Delay(5);
			}
		}
	
		else if (button & BT_back)
		{
			if(Selection<7)
			{
				Selection++;
				Delay(5);
			}
		}
		
		else if (button & BT_USE)
		{
			Switch(Selection)
			{	
				Case 0:
				Case 1:
				Case 2:
				Case 3:
				Case 4:
				Case 5:
				if (CheckInventory("SkillPoints") >= (Menuoptions[1][Selection].Cost * (CheckInventory(Menuoptions[1][Selection].item) + 1)) 
				&& CheckInventory(Menuoptions[1][Selection].item) < Menuoptions[1][Selection].maxrank 
				&& CheckInventory("Playerlevel") >= Menuoptions[1][Selection].levelreq)
				{
					TakeInventory("SkillPoints",Menuoptions[1][Selection].Cost * (CheckInventory(Menuoptions[1][Selection].item)+1));
					GiveInventory("SpentSkillPoints",Menuoptions[1][Selection].Cost * (CheckInventory(Menuoptions[1][Selection].item)+1));
					GiveInventory(Menuoptions[1][Selection].item,1);
					Delay(5);
				}
				Break;

				//always last
				case 6:
				TakeInventory("MenuOpen",1);
				Selection=0;
				Delay(5);
				Restart;
				Break;
				
				case 7:
				TakeInventory("MenuOpen",99);
				Selection=0;
				SetPlayerProperty(0, False, PROP_TOTALLYFROZEN);
				Delay(5);
				Break;
			}
		}
		MRPGinmenuTEXT(Selection,8,1);
		Delay(1);
	}
}